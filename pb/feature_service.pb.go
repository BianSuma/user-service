// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: feature_service.proto

package users

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ListFeatureResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Features []*Feature `protobuf:"bytes,1,rep,name=features,proto3" json:"features,omitempty"`
}

func (x *ListFeatureResponse) Reset() {
	*x = ListFeatureResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feature_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFeatureResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFeatureResponse) ProtoMessage() {}

func (x *ListFeatureResponse) ProtoReflect() protoreflect.Message {
	mi := &file_feature_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFeatureResponse.ProtoReflect.Descriptor instead.
func (*ListFeatureResponse) Descriptor() ([]byte, []int) {
	return file_feature_service_proto_rawDescGZIP(), []int{0}
}

func (x *ListFeatureResponse) GetFeatures() []*Feature {
	if x != nil {
		return x.Features
	}
	return nil
}

type PackageFeatureRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	FeatureId string `protobuf:"bytes,2,opt,name=feature_id,json=featureId,proto3" json:"feature_id,omitempty"`
}

func (x *PackageFeatureRequest) Reset() {
	*x = PackageFeatureRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feature_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PackageFeatureRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackageFeatureRequest) ProtoMessage() {}

func (x *PackageFeatureRequest) ProtoReflect() protoreflect.Message {
	mi := &file_feature_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackageFeatureRequest.ProtoReflect.Descriptor instead.
func (*PackageFeatureRequest) Descriptor() ([]byte, []int) {
	return file_feature_service_proto_rawDescGZIP(), []int{1}
}

func (x *PackageFeatureRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PackageFeatureRequest) GetFeatureId() string {
	if x != nil {
		return x.FeatureId
	}
	return ""
}

var File_feature_service_proto protoreflect.FileDescriptor

var file_feature_service_proto_rawDesc = []byte{
	0x0a, 0x15, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x77, 0x69, 0x72, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x1a, 0x15, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4a, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x08,
	0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x77, 0x69, 0x72, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e,
	0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x22, 0x46, 0x0a, 0x15, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x46, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x64, 0x32, 0xc2, 0x02, 0x0a, 0x0e, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3c, 0x0a, 0x06,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x17, 0x2e, 0x77, 0x69, 0x72, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x1a,
	0x17, 0x2e, 0x77, 0x69, 0x72, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x06, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x17, 0x2e, 0x77, 0x69, 0x72, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x1a, 0x17, 0x2e,
	0x77, 0x69, 0x72, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x04, 0x56, 0x69, 0x65, 0x77,
	0x12, 0x12, 0x2e, 0x77, 0x69, 0x72, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x2e, 0x49, 0x64, 0x1a, 0x17, 0x2e, 0x77, 0x69, 0x72, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x00, 0x12,
	0x37, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x12, 0x2e, 0x77, 0x69, 0x72, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x49, 0x64, 0x1a, 0x17, 0x2e,
	0x77, 0x69, 0x72, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x15, 0x2e, 0x77, 0x69, 0x72, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x23, 0x2e, 0x77, 0x69, 0x72, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0xee,
	0x01, 0x0a, 0x15, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3e, 0x0a, 0x04, 0x56, 0x69, 0x65, 0x77,
	0x12, 0x12, 0x2e, 0x77, 0x69, 0x72, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x2e, 0x49, 0x64, 0x1a, 0x20, 0x2e, 0x77, 0x69, 0x72, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4f, 0x66, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x06, 0x52, 0x65, 0x76, 0x6f,
	0x6b, 0x65, 0x12, 0x25, 0x2e, 0x77, 0x69, 0x72, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x73, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x77, 0x69, 0x72, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65,
	0x61, 0x6e, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x05, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x12, 0x25, 0x2e,
	0x77, 0x69, 0x72, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x77, 0x69, 0x72, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x22, 0x00, 0x42,
	0x0a, 0x5a, 0x08, 0x70, 0x62, 0x3b, 0x75, 0x73, 0x65, 0x72, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_feature_service_proto_rawDescOnce sync.Once
	file_feature_service_proto_rawDescData = file_feature_service_proto_rawDesc
)

func file_feature_service_proto_rawDescGZIP() []byte {
	file_feature_service_proto_rawDescOnce.Do(func() {
		file_feature_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_feature_service_proto_rawDescData)
	})
	return file_feature_service_proto_rawDescData
}

var file_feature_service_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_feature_service_proto_goTypes = []interface{}{
	(*ListFeatureResponse)(nil),   // 0: wiradata.users.ListFeatureResponse
	(*PackageFeatureRequest)(nil), // 1: wiradata.users.PackageFeatureRequest
	(*Feature)(nil),               // 2: wiradata.users.Feature
	(*Id)(nil),                    // 3: wiradata.users.Id
	(*Empty)(nil),                 // 4: wiradata.users.Empty
	(*Boolean)(nil),               // 5: wiradata.users.Boolean
	(*PackageOfFeature)(nil),      // 6: wiradata.users.PackageOfFeature
}
var file_feature_service_proto_depIdxs = []int32{
	2, // 0: wiradata.users.ListFeatureResponse.features:type_name -> wiradata.users.Feature
	2, // 1: wiradata.users.FeatureService.Create:input_type -> wiradata.users.Feature
	2, // 2: wiradata.users.FeatureService.Update:input_type -> wiradata.users.Feature
	3, // 3: wiradata.users.FeatureService.View:input_type -> wiradata.users.Id
	3, // 4: wiradata.users.FeatureService.Delete:input_type -> wiradata.users.Id
	4, // 5: wiradata.users.FeatureService.List:input_type -> wiradata.users.Empty
	3, // 6: wiradata.users.PackageFeatureService.View:input_type -> wiradata.users.Id
	1, // 7: wiradata.users.PackageFeatureService.Revoke:input_type -> wiradata.users.PackageFeatureRequest
	1, // 8: wiradata.users.PackageFeatureService.Grant:input_type -> wiradata.users.PackageFeatureRequest
	2, // 9: wiradata.users.FeatureService.Create:output_type -> wiradata.users.Feature
	2, // 10: wiradata.users.FeatureService.Update:output_type -> wiradata.users.Feature
	2, // 11: wiradata.users.FeatureService.View:output_type -> wiradata.users.Feature
	5, // 12: wiradata.users.FeatureService.Delete:output_type -> wiradata.users.Boolean
	0, // 13: wiradata.users.FeatureService.List:output_type -> wiradata.users.ListFeatureResponse
	6, // 14: wiradata.users.PackageFeatureService.View:output_type -> wiradata.users.PackageOfFeature
	5, // 15: wiradata.users.PackageFeatureService.Revoke:output_type -> wiradata.users.Boolean
	5, // 16: wiradata.users.PackageFeatureService.Grant:output_type -> wiradata.users.Boolean
	9, // [9:17] is the sub-list for method output_type
	1, // [1:9] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_feature_service_proto_init() }
func file_feature_service_proto_init() {
	if File_feature_service_proto != nil {
		return
	}
	file_feature_message_proto_init()
	file_generic_message_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_feature_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFeatureResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feature_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PackageFeatureRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_feature_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_feature_service_proto_goTypes,
		DependencyIndexes: file_feature_service_proto_depIdxs,
		MessageInfos:      file_feature_service_proto_msgTypes,
	}.Build()
	File_feature_service_proto = out.File
	file_feature_service_proto_rawDesc = nil
	file_feature_service_proto_goTypes = nil
	file_feature_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// FeatureServiceClient is the client API for FeatureService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FeatureServiceClient interface {
	Create(ctx context.Context, in *Feature, opts ...grpc.CallOption) (*Feature, error)
	Update(ctx context.Context, in *Feature, opts ...grpc.CallOption) (*Feature, error)
	View(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Feature, error)
	Delete(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Boolean, error)
	List(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListFeatureResponse, error)
}

type featureServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFeatureServiceClient(cc grpc.ClientConnInterface) FeatureServiceClient {
	return &featureServiceClient{cc}
}

func (c *featureServiceClient) Create(ctx context.Context, in *Feature, opts ...grpc.CallOption) (*Feature, error) {
	out := new(Feature)
	err := c.cc.Invoke(ctx, "/wiradata.users.FeatureService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureServiceClient) Update(ctx context.Context, in *Feature, opts ...grpc.CallOption) (*Feature, error) {
	out := new(Feature)
	err := c.cc.Invoke(ctx, "/wiradata.users.FeatureService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureServiceClient) View(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Feature, error) {
	out := new(Feature)
	err := c.cc.Invoke(ctx, "/wiradata.users.FeatureService/View", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureServiceClient) Delete(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Boolean, error) {
	out := new(Boolean)
	err := c.cc.Invoke(ctx, "/wiradata.users.FeatureService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureServiceClient) List(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListFeatureResponse, error) {
	out := new(ListFeatureResponse)
	err := c.cc.Invoke(ctx, "/wiradata.users.FeatureService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FeatureServiceServer is the server API for FeatureService service.
type FeatureServiceServer interface {
	Create(context.Context, *Feature) (*Feature, error)
	Update(context.Context, *Feature) (*Feature, error)
	View(context.Context, *Id) (*Feature, error)
	Delete(context.Context, *Id) (*Boolean, error)
	List(context.Context, *Empty) (*ListFeatureResponse, error)
}

// UnimplementedFeatureServiceServer can be embedded to have forward compatible implementations.
type UnimplementedFeatureServiceServer struct {
}

func (*UnimplementedFeatureServiceServer) Create(context.Context, *Feature) (*Feature, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedFeatureServiceServer) Update(context.Context, *Feature) (*Feature, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedFeatureServiceServer) View(context.Context, *Id) (*Feature, error) {
	return nil, status.Errorf(codes.Unimplemented, "method View not implemented")
}
func (*UnimplementedFeatureServiceServer) Delete(context.Context, *Id) (*Boolean, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedFeatureServiceServer) List(context.Context, *Empty) (*ListFeatureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}

func RegisterFeatureServiceServer(s *grpc.Server, srv FeatureServiceServer) {
	s.RegisterService(&_FeatureService_serviceDesc, srv)
}

func _FeatureService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Feature)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wiradata.users.FeatureService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureServiceServer).Create(ctx, req.(*Feature))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Feature)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wiradata.users.FeatureService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureServiceServer).Update(ctx, req.(*Feature))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureService_View_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureServiceServer).View(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wiradata.users.FeatureService/View",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureServiceServer).View(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wiradata.users.FeatureService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureServiceServer).Delete(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wiradata.users.FeatureService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureServiceServer).List(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _FeatureService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "wiradata.users.FeatureService",
	HandlerType: (*FeatureServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _FeatureService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _FeatureService_Update_Handler,
		},
		{
			MethodName: "View",
			Handler:    _FeatureService_View_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _FeatureService_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _FeatureService_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "feature_service.proto",
}

// PackageFeatureServiceClient is the client API for PackageFeatureService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PackageFeatureServiceClient interface {
	View(ctx context.Context, in *Id, opts ...grpc.CallOption) (*PackageOfFeature, error)
	Revoke(ctx context.Context, in *PackageFeatureRequest, opts ...grpc.CallOption) (*Boolean, error)
	Grant(ctx context.Context, in *PackageFeatureRequest, opts ...grpc.CallOption) (*Boolean, error)
}

type packageFeatureServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPackageFeatureServiceClient(cc grpc.ClientConnInterface) PackageFeatureServiceClient {
	return &packageFeatureServiceClient{cc}
}

func (c *packageFeatureServiceClient) View(ctx context.Context, in *Id, opts ...grpc.CallOption) (*PackageOfFeature, error) {
	out := new(PackageOfFeature)
	err := c.cc.Invoke(ctx, "/wiradata.users.PackageFeatureService/View", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *packageFeatureServiceClient) Revoke(ctx context.Context, in *PackageFeatureRequest, opts ...grpc.CallOption) (*Boolean, error) {
	out := new(Boolean)
	err := c.cc.Invoke(ctx, "/wiradata.users.PackageFeatureService/Revoke", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *packageFeatureServiceClient) Grant(ctx context.Context, in *PackageFeatureRequest, opts ...grpc.CallOption) (*Boolean, error) {
	out := new(Boolean)
	err := c.cc.Invoke(ctx, "/wiradata.users.PackageFeatureService/Grant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PackageFeatureServiceServer is the server API for PackageFeatureService service.
type PackageFeatureServiceServer interface {
	View(context.Context, *Id) (*PackageOfFeature, error)
	Revoke(context.Context, *PackageFeatureRequest) (*Boolean, error)
	Grant(context.Context, *PackageFeatureRequest) (*Boolean, error)
}

// UnimplementedPackageFeatureServiceServer can be embedded to have forward compatible implementations.
type UnimplementedPackageFeatureServiceServer struct {
}

func (*UnimplementedPackageFeatureServiceServer) View(context.Context, *Id) (*PackageOfFeature, error) {
	return nil, status.Errorf(codes.Unimplemented, "method View not implemented")
}
func (*UnimplementedPackageFeatureServiceServer) Revoke(context.Context, *PackageFeatureRequest) (*Boolean, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Revoke not implemented")
}
func (*UnimplementedPackageFeatureServiceServer) Grant(context.Context, *PackageFeatureRequest) (*Boolean, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Grant not implemented")
}

func RegisterPackageFeatureServiceServer(s *grpc.Server, srv PackageFeatureServiceServer) {
	s.RegisterService(&_PackageFeatureService_serviceDesc, srv)
}

func _PackageFeatureService_View_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackageFeatureServiceServer).View(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wiradata.users.PackageFeatureService/View",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackageFeatureServiceServer).View(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _PackageFeatureService_Revoke_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PackageFeatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackageFeatureServiceServer).Revoke(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wiradata.users.PackageFeatureService/Revoke",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackageFeatureServiceServer).Revoke(ctx, req.(*PackageFeatureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PackageFeatureService_Grant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PackageFeatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackageFeatureServiceServer).Grant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wiradata.users.PackageFeatureService/Grant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackageFeatureServiceServer).Grant(ctx, req.(*PackageFeatureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PackageFeatureService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "wiradata.users.PackageFeatureService",
	HandlerType: (*PackageFeatureServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "View",
			Handler:    _PackageFeatureService_View_Handler,
		},
		{
			MethodName: "Revoke",
			Handler:    _PackageFeatureService_Revoke_Handler,
		},
		{
			MethodName: "Grant",
			Handler:    _PackageFeatureService_Grant_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "feature_service.proto",
}
